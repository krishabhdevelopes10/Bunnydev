# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119DGoujmu4ArayEuEPY2OLpc7lgqOCaZ
"""

import React, { useState } from "react";

// SpaceBlackJack.jsx
// Single-file React component (default export)
// Tailwind CSS utility classes assumed to be available in the host app
// How it works:
// - Player and "Mission Control" (dealer) draw resource cards.
// - Cards represent resource units (fuel/oxygen/power) with values 1-11.
// - Goal: get as close to TARGET (21) without exceeding it — higher total = better mission success
// - Player can Hit (draw) or Stand (stop). Dealer plays simple rule-based policy.
// - The game tracks wins, losses and shows a simple mission success probability estimate.

const TARGET = 21;
const STARTING_BALANCE = 0; // track mission success score

function randomCard() {
  // Simulate a "resource card" value 1..11 where 11 is like an "Ace" (can count as 1 or 11)
  const v = Math.floor(Math.random() * 11) + 1;
  return v;
}

function computeBestTotal(cards) {
  // If there is any 11 (ace-like), try counting some as 1 to avoid bust
  let total = cards.reduce((a, b) => a + b, 0);
  let aces = cards.filter((c) => c === 11).length;
  while (total > TARGET && aces > 0) {
    total -= 10; // count one 11 as 1 instead of 11
    aces -= 1;
  }
  return total;
}

function estimateSuccessProbability(total) {
  // Very simple heuristic: closer to TARGET up to TARGET increases probability.
  // Penalize bust (>TARGET) heavily. This is just an illustrative estimate.
  if (total > TARGET) return 0;
  return Math.max(5, Math.round(((total / TARGET) * 100)));
}

export default function SpaceBlackJack() {
  const [playerCards, setPlayerCards] = useState([randomCard(), randomCard()]);
  const [dealerCards, setDealerCards] = useState([randomCard(), randomCard()]);
  const [message, setMessage] = useState("Welcome, Commander! Prepare your mission.");
  const [running, setRunning] = useState(true);
  const [wins, setWins] = useState(0);
  const [losses, setLosses] = useState(0);
  const [draws, setDraws] = useState(0);

  const playerTotal = computeBestTotal(playerCards);
  const dealerTotal = computeBestTotal(dealerCards);
  const playerProb = estimateSuccessProbability(playerTotal);

  function resetRound() {
    setPlayerCards([randomCard(), randomCard()]);
    setDealerCards([randomCard(), randomCard()]);
    setMessage("New mission ready. Choose your action.");
    setRunning(true);
  }

  function playerHit() {
    if (!running) return;
    const card = randomCard();
    const next = [...playerCards, card];
    setPlayerCards(next);
    const total = computeBestTotal(next);
    if (total > TARGET) {
      setMessage(`You busted with ${total}. Mission failed.`);
      setLosses((l) => l + 1);
      setRunning(false);
    } else {
      setMessage(`You drew ${card}. Total ${total}.`);
    }
  }

  function playerStand() {
    if (!running) return;
    // Dealer simple policy: hit until 17 or higher
    let dCards = [...dealerCards];
    let dTotal = computeBestTotal(dCards);
    while (dTotal < 17) {
      dCards.push(randomCard());
      dTotal = computeBestTotal(dCards);
    }
    setDealerCards(dCards);

    const pTotal = computeBestTotal(playerCards);
    const result = determineOutcome(pTotal, dTotal);
    setMessage(result.message);
    if (result.outcome === "win") setWins((w) => w + 1);
    else if (result.outcome === "loss") setLosses((l) => l + 1);
    else setDraws((d) => d + 1);
    setRunning(false);
  }

  function determineOutcome(pTotal, dTotal) {
    if (pTotal > TARGET) return { outcome: "loss", message: `You busted (${pTotal}). Dealer wins.` };
    if (dTotal > TARGET) return { outcome: "win", message: `Dealer busted (${dTotal}). Mission success!` };
    if (pTotal > dTotal) return { outcome: "win", message: `You win (${pTotal} vs ${dTotal}). Mission success!` };
    if (pTotal < dTotal) return { outcome: "loss", message: `Dealer wins (${dTotal} vs ${pTotal}). Mission failed.` };
    return { outcome: "draw", message: `Tie (${pTotal} vs ${dTotal}). Partial success.` };
  }

  // Small helper to pretty-print cards as resources
  function renderCardValue(v) {
    if (v === 11) return "Ace"; // treat 11 as Ace
    return v;
  }

  return (
    <div className="max-w-3xl mx-auto p-6 bg-gradient-to-b from-slate-900 to-slate-800 text-slate-100 rounded-2xl shadow-2xl">
      <header className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Space BlackJack</h1>
        <div className="text-sm text-slate-300">Target: {TARGET} • Think like Mission Control</div>
      </header>

      <main className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
        <section className="bg-slate-700/30 p-4 rounded-xl">
          <h2 className="font-semibold">Commander (You)</h2>
          <div className="mt-2">Cards:</div>
          <div className="flex flex-wrap gap-2 mt-2">
            {playerCards.map((c, i) => (
              <div key={i} className="px-3 py-2 bg-slate-600 rounded-md text-lg">
                {renderCardValue(c)}
              </div>
            ))}
          </div>
          <div className="mt-3">Best Total: <span className="font-bold">{playerTotal}</span></div>
          <div className="mt-1 text-sm text-slate-300">Estimated mission success: <span className="font-semibold">{playerProb}%</span></div>

          <div className="mt-4 flex gap-3">
            <button onClick={playerHit} className="px-4 py-2 rounded-xl bg-emerald-500 hover:bg-emerald-600 text-slate-900 font-semibold" disabled={!running}>
              Hit
            </button>
            <button onClick={playerStand} className="px-4 py-2 rounded-xl bg-yellow-400 hover:bg-yellow-500 text-slate-900 font-semibold" disabled={!running}>
              Stand
            </button>
            <button onClick={resetRound} className="px-3 py-2 rounded-xl bg-slate-600 hover:bg-slate-500 text-slate-100" >Reset</button>
          </div>
        </section>

        <section className="bg-slate-700/30 p-4 rounded-xl">
          <h2 className="font-semibold">Mission Control (Dealer)</h2>
          <div className="mt-2">Cards:</div>
          <div className="flex flex-wrap gap-2 mt-2">
            {dealerCards.map((c, i) => (
              <div key={i} className="px-3 py-2 bg-slate-600 rounded-md text-lg">
                {renderCardValue(c)}
              </div>
            ))}
          </div>
          <div className="mt-3">Best Total: <span className="font-bold">{computeBestTotal(dealerCards)}</span></div>

          <div className="mt-4">
            <div className="text-slate-300">Round results</div>
            <div className="mt-2 p-3 bg-slate-800/30 rounded">{message}</div>
          </div>

          <div className="mt-4 grid grid-cols-3 gap-2 text-center text-sm">
            <div className="p-2 bg-slate-600 rounded">Wins<br/><span className="font-bold text-lg">{wins}</span></div>
            <div className="p-2 bg-slate-600 rounded">Losses<br/><span className="font-bold text-lg">{losses}</span></div>
            <div className="p-2 bg-slate-600 rounded">Draws<br/><span className="font-bold text-lg">{draws}</span></div>
          </div>
        </section>
      </main>

      <footer className="mt-6 text-sm text-slate-300">
        <div className="mb-2">How this maps to real missions:</div>
        <ul className="list-disc ml-5">
          <li>Cards = resource chunks (fuel, oxygen, power)</li>
          <li>Hit = take more resources or attempt riskier maneuvers</li>
          <li>Stand = preserve current reserves and proceed conservatively</li>
        </ul>

        <div className="mt-4 text-xs text-slate-400">Tip: tweak card generation and dealer policy to simulate different mission difficulty levels for teaching or research.</div>
      </footer>
    </div>
  );
}